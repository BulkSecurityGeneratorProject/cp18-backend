---
- name: bootstrap the AWS environment with a VPC and a app instance
  hosts: localhost
  connection: local
  gather_facts: False
  vars:
    aws_region: us-east-2
    cidr: 10.0.0.0/16
    public_subnets: ["10.0.1.0/24"]
    private_subnets: ["10.0.2.0/24"]
    # instance_ami: ami-5e8bb23b # us-east-2 - ubuntu18.04LTS
    instance_type: m5.large
    instance_spot_price: 0.096
  tasks:
  - name: VPC
    ec2_vpc_net:
      region: "{{ aws_region }}"
      name: "{{ site_env }}-vpc"
      cidr_block: "{{ cidr }}"
      tags:
        Environment: "{{ site_env }}"
    register: vpc

  - name: public subnet
    ec2_vpc_subnet:
      region: "{{ aws_region }}"
      az: "{{ aws_region }}a"
      cidr: "{{ item }}"
      map_public: True
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
        Name: "{{ site_env }}-pub-a"
        Public: True
        Environment: "{{ site_env }}"
    with_items: "{{ public_subnets }}"
    register: public_subnets_result

  - name: internet gateway
    ec2_vpc_igw:
      region: "{{ aws_region }}"
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
        Name: "{{ site_env }}-gateway"
        Environment: "{{ site_env }}"
    register: igw

  - name: public route table
    ec2_vpc_route_table:
      region: "{{ aws_region }}"
      vpc_id: "{{ vpc.vpc.id }}"
      subnets: "{{ public_subnets_result.results | map(attribute='subnet.id') | list }}"
      routes:
        - dest: 0.0.0.0/0
          gateway_id: "{{ igw.gateway_id }}"
      tags:
        Role: public
        Environment: "{{ site_env }}"
  ###
  # Create an instance for app
  ###
  - name: security group
    ec2_group:
      region: "{{ aws_region }}"
      name: "{{ site_env }}_allow_ssh"
      description: Allow SSH access from outer world
      vpc_id: "{{ vpc.vpc.id }}"
      rules:
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
    register: app_security_group

  - name: launch config
    ec2_lc:
      region: "{{ aws_region }}"
      name: "{{ site_env }}-lg"
      image_id: "{{ instance_ami }}"
      instance_type: "{{ instance_type }}"
      security_groups: ["{{ app_security_group.group_id }}"]
      instance_monitoring: False
      assign_public_ip: True
      spot_price: "{{ instance_spot_price }}"
      # Create the bastion IAM role manually
      instance_profile_name: app
      # Create the bastion IAM role manually
      key_name: app
      volumes:
        - device_name: /dev/sda1
          volume_size: 16
          volume_type: gp2
          delete_on_termination: true
    register: app_launch_config

  - name: auto-scaling group
    ec2_asg:
      region: "{{ aws_region }}"
      name: "{{ site_env }}-ag"
      launch_config_name: "{{ app_launch_config.result.launch_configuration_name }}"
      min_size: 1
      max_size: 1
      desired_capacity: 1
      vpc_zone_identifier: "{{ public_subnets_result.results | map(attribute='subnet.id') | list }}"
      # Create key pair manually
      wait_for_instances: True
      tags:
        - Name: "{{ site_env }}"
          propagate_at_launch: True
        - Environment: "{{ site_env }}"
          propagate_at_launch: True
        - Role: app
          propagate_at_launch: True
    register: app_asg

  # - name: assign elastic IP
  #   ec2_eip:
  #     region: "{{ aws_region }}"
  #     in_vpc: True
  #     device_id: "{{ app_asg.instances[0] }}"
  #     release_on_disassociation: True
  #     reuse_existing_ip_allowed: True
  #   register: app_eip

  # ---------------- RDS -----------------
  # - name: rds security group
  #   ec2_group:
  #     region: "{{ aws_region }}"
  #     name: "{{ site_env }}_rds_allow_postgres"
  #     description: Allow postgres access from public subnets
  #     vpc_id: "{{ vpc.id }}"
  #     rules:
  #       - proto: tcp
  #         from_port: 5432
  #         to_port: 5432
  #         group_id: "{{ ecs_sg.group_id }}"
  #       - proto: icmp
  #         group_id: "{{ ecs_sg.group_id }}"
  #         from_port: -1
  #         to_port: -1
  #   register: rds_sg

  # - name: create db subnet group
  #   rds_subnet_group:
  #     state: present
  #     name: "{{ rds_subnet_group_name }}"
  #     description: "the database subnet group"
  #     region: "{{ aws_region }}"
  #     subnets: "{{ db_subnets_result.results | map(attribute='subnet.id') | list }}"
  #   register: rds_subnet_group_results

  # - name: include db secrets
  #   include_vars:
  #     file: secrets.yaml

  # - name: get rds instance facts
  #   command: aws rds describe-db-instances --no-paginate --region {{ aws_region }}
  #   register: rds_facts_output

  # - set_fact:
  #     rds_facts: "{{ rds_facts_output.stdout | from_json }}"

  # - set_fact:
  #     db_instances: "{{ rds_facts.DBInstances | map(attribute='DBInstanceIdentifier') | list | intersect(database_name) | list }}"

  # - name: create RDS instance
  #   # TODO: configure snapshot, backup policy, production read-replica, etc.,
  #   rds:
  #     region: "{{ aws_region }}"
  #     command: create
  #     instance_name: "{{ database_name }}"
  #     db_engine: "{{ db_engine }}"
  #     size: "{{ db_size }}"
  #     instance_type: "{{ db_instance_type }}"
  #     db_name: "{{ site_name }}"
  #     username: "{{ database[site_env].username }}"
  #     password: "{{ database[site_env].password }}"
  #     subnet: "{{ rds_subnet_group_name }}"
  #     vpc_security_groups: ["{{ rds_sg.group_id }}"]
  #     tags:
  #       Name: "{{ site_env }}-{{ db_engine }}-db"
  #       Environment: "{{ site_env }}"
  #     wait: true
  #   when: db_instances | length == 0
