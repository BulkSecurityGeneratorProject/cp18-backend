- name: Create AWS Stack for the backend
  hosts: localhost
  gather_facts: false
  connection: local
  vars:
    keypair: id_rsa
    instance_type: t2.micro
    db_instance_type: db.t2.micro
    image: ami-0bdf93799014acdc4
    region: eu-central-1
  tasks:
    - name: Gather facts about VPCs
      ec2_vpc_net_facts:
        region: "{{ region }}" 
      register: vpcs

    - name: SSH from outside Security Group
      ec2_group:
       region: "{{ region }}"
       name: ec2_ssh_cp
       description: SSH from outside
       vpc_id: vpc-c7c8c8ae
       rules:
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
      register: ssh_security_group  

    - name: Access web server Security Group
      ec2_group:
       region: "{{ region }}"
       name: ec2_web_cp
       description: Access web server on ports 80 and 8080
       vpc_id: vpc-c7c8c8ae
       rules:
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 8080
          to_port: 8080
          cidr_ip: 0.0.0.0/0
      register: web_security_group  

    - name: Access RDS from EC2 Security Group
      ec2_group:
       region: "{{ region }}"
       name: ec2_rds_cp
       description: Access RDS from EC2
       vpc_id: vpc-c7c8c8ae
       rules:
        - proto: tcp
          from_port: 3306
          to_port: 3306
          group_name: "{{ web_security_group.group_name }}"
      register: rds_security_group          
      
    - name: Launch EC2 Instance
      ec2:   
          key_name: "{{ keypair }}"
          group: ['ec2_ssh_cp', 'ec2_web_cp']
          instance_type: "{{ instance_type }}"
          image: "{{ image }}"
          wait: true
          region: "{{ region }}"
      register: ec2
      
    - name: Create RDS MySQL Instance
      rds:
          command: create
          region: "{{ region }}"
          instance_name: cpdb
          db_engine: MySQL
          size: 10
          instance_type: "{{ db_instance_type }}"
          vpc_security_groups: "{{ rds_security_group.group_id }}"
          username: root
          password: CloudPrototyping2019
      
    - name: Wait for SSH to come up
      wait_for: host={{ item.public_dns_name }} port=22 delay=60 timeout=320 state=started
      with_items: "{{ ec2.instances }}"
      
    - name: Print all ec2 variables
      debug: var=ec2